import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, ConversationHandler
from telegram.ext import CallbackContext
import os
import config  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ config.py
TOKEN = config.TOKEN
ADMIN_ID = config.ADMIN_ID

# –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
PHOTO_PATH = config.PHOTO_PATH

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ENTER_PHONE = 0
CONFIRM_ENTRY = 1

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –∫–æ–¥–æ–º –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def send_screenshot_to_user(update: Update, phone_number: str, user_id: int):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –∫–æ–¥–æ–º –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(PHOTO_PATH, 'rb') as photo_file:
        update.message.reply_photo(
            photo=photo_file,
            caption=f"üë§ –ó–∞–ø—Ä–æ—à–µ–Ω –≤—Ö–æ–¥ –≤ –≤–∞—à –í–¶ —Å –Ω–æ–º–µ—Ä–æ–º {phone_number}. –í–æ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ª–æ–≥–∏–Ω–∞, –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º.\n\n–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ –Ω–æ–º–µ—Ä, –∑–∞—Ç–µ–º –ª–∏–±–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –≤—Ö–æ–¥–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –í–æ—à–µ–ª' –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–∏–Ω—É—Ç."
        )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞
    keyboard = [
        [InlineKeyboardButton("‚úÖ –í–æ—à–µ–ª", callback_data=f'success_{user_id}')],
        [InlineKeyboardButton("‚ùå –ù–µ —Å–º–æ–≥ –≤–æ–π—Ç–∏, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç", callback_data=f'failed_{user_id}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('–ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', reply_markup=reply_markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å
    users[user_id] = {'phone': phone_number, 'status': 'waiting'}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
def start(update: Update, context: CallbackContext) -> int:
    update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.')
    return ENTER_PHONE

# –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def receive_phone(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    phone_number = update.message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ —Å–ª–æ–≤–∞—Ä—å
    users[user_id] = {'phone': phone_number}

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    context.bot.send_message(chat_id=ADMIN_ID, text=f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –Ω–æ–º–µ—Ä: {phone_number}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –∫–æ–¥
    send_screenshot_to_user(update, phone_number, user_id)

    return CONFIRM_ENTRY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user_id = int(query.data.split('_')[1])
    choice = query.data.split('_')[0]

    if user_id not in users:
        query.answer()
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—Ö–æ–¥
    if choice == 'success':
        users[user_id]['status'] = 'success'
        context.bot.send_message(chat_id=ADMIN_ID, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª.")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–≥ –≤–æ–π—Ç–∏
    elif choice == 'failed':
        users[user_id]['status'] = 'failed'
        context.bot.send_message(chat_id=ADMIN_ID, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —Å–º–æ–≥ –≤–æ–π—Ç–∏, –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–∫—Ä–∏–Ω—à–æ—Ç.")

    query.answer()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –∫–æ–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def send_code(update: Update, context: CallbackContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if update.message.from_user.id == ADMIN_ID:
        if len(context.args) > 0:
            user_id = int(context.args[0])  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in users:
                phone_number = users[user_id]['phone']
                send_screenshot_to_user(update, phone_number, user_id)
                update.message.reply_text(f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
            else:
                update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.")
    else:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –ü—Ä–∞–π—Å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
def price(update: Update, context: CallbackContext):
    price_text = f"–¶–µ–Ω—ã –Ω–∞ –í–¶:\n1 —á–∞—Å ‚Äî {config.PRICE_INFO['1_hour']}$\n–ü–æ—Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å ‚Äî {config.PRICE_INFO['subsequent_hour']}$"
    update.message.reply_text(price_text)

def instructions(update: Update, context: CallbackContext):
    update.message.reply_text("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–¥–∞—Ç—å –í–¶, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å, –∏ –æ–∂–∏–¥–∞–π—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–ª–µ—Ç –≤–∞–º –±–æ—Ç.")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
def end(update: Update, context: CallbackContext) -> int:
    update.message.reply_text('–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω.')
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–æ—Ç–∞
def main() -> None:
    updater = Updater(TOKEN)

    dp = updater.dispatcher

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ENTER_PHONE: [MessageHandler(Filters.text & ~Filters.command, receive_phone)],
            CONFIRM_ENTRY: [CallbackQueryHandler(button)],
        },
        fallbacks=[CommandHandler('end', end)],
    )

    dp.add_handler(conv_handler)
    dp.add_handler(CommandHandler('send_code', send_code))  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    dp.add_handler(CommandHandler('price', price))
    dp.add_handler(CommandHandler('instructions', instructions))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
